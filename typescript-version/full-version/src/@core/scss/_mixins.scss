@mixin themed($property, $light-value, $dark-value) {
  @at-root {
    .v-theme {
      &--light {
        #{$property}: $light-value;
      }

      &--dark {
        #{$property}: $dark-value;
      }
    }
  }
}

// ℹ️ This mixin is inspired from vuetify for adding hover styles via before pseudo element
@mixin before-pseudo() {
  position: relative;

  &::before {
    position: absolute;
    background: currentcolor;
    block-size: 100%;
    border-radius: inherit;
    content: "";
    inline-size: 100%;
    inset: 0;
    opacity: 0;
    pointer-events: none;
  }
}

// ℹ️ This is exact copy of vuetify mixin "states" (packages/vuetify/src/styles/tools/_states.sass)
// TODO: Use vuetify mixin if possible
@mixin states($selector: "&::before", $active: true) {
  &:hover {
    #{$selector} {
      opacity: calc(0.04 * var(--v-theme-overlay-multiplier));
    }
  }

  &:focus-visible {
    #{$selector} { opacity: calc(0.12 * var(--v-theme-overlay-multiplier)); }
  }

  @supports not selector(:focus-visible) {
    &:focus {
      #{$selector} { opacity: calc(0.12 * var(--v-theme-overlay-multiplier)); }
    }
  }

  @if $active {
    &--active { @include active-states($selector); }
  }
}

// ℹ️ This mixin is slightly modified version of vuetify mixin "active-states" (packages/vuetify/src/styles/tools/_states.sass)
@mixin active-states($selector: "::before") {
  &:hover#{$selector},
  &#{$selector} {
    opacity: calc(0.12 * var(--v-theme-overlay-multiplier));
  }

  &:focus {
    #{$selector} { opacity: calc(0.16 * var(--v-theme-overlay-multiplier)); }
  }
}

// ——— Light background generator ——————— //
// ℹ️ With this you have to give text color to the component you want light bg
// e.g. class="avatar-initial text-primary" for primary light bg
@mixin light-bg-provider($component, $inner-selector: "", $opacity: 0.12) {
  .v-application .#{$component}.#{$component}-light-bg #{$inner-selector} {
    background-color: transparent !important;

    &.bg-static-white {
      background-color: white !important;
    }

    &::before {
      position: absolute;
      background-color: currentcolor;
      border-radius: inherit;
      content: "";
      inset: 0;
      opacity: $opacity;
      pointer-events: none;
    }
  }
}

@mixin bordered-skin($component, $border-property: "border", $important: false) {
  #{$component} {
    background-color: rgb(var(--v-theme-background));
    box-shadow: none !important;

    /* stylelint-disable-next-line color-function-notation */
    #{$border-property}: 1px solid rgba(var(--v-border-color), var(--v-border-opacity)) if($important, !important, null);
  }
}

// ℹ️ Generate Image variants for light and dark bg
@mixin gen-img-variants($property,$light, $dark, $light-bordered:false , $dark-bordered:false, $important: false) {
  // light bg
  .v-application.v-theme--light & {
    #{$property}: $light if($important, !important, null);
  }

  // dark bg
  .v-application.v-theme--dark & {
    #{$property}: $dark if($important, !important, null);
  }

  // light bordered bg
  @if $light-bordered {
    .v-application.v-theme--light .skin--bordered & {
      #{$property}: $light-bordered if($important, !important, null);
    }
  }

  // dark bordered bg
  @if $dark-bordered {
    .v-application.v-theme--dark .skin--bordered & {
      #{$property}: $dark-bordered if($important, !important, null);
    }
  }
}
