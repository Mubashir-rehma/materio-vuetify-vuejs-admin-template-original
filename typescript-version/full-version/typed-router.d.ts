// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/[...all]': RouteRecordInfo<'/[...all]', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    '/access-control': RouteRecordInfo<'/access-control', '/access-control', Record<never, never>, Record<never, never>>,
    '/apps/calendar': RouteRecordInfo<'/apps/calendar', '/apps/calendar', Record<never, never>, Record<never, never>>,
    '/apps/chat': RouteRecordInfo<'/apps/chat', '/apps/chat', Record<never, never>, Record<never, never>>,
    '/apps/email/': RouteRecordInfo<'/apps/email/', '/apps/email', Record<never, never>, Record<never, never>>,
    '/apps/invoice/add/': RouteRecordInfo<'/apps/invoice/add/', '/apps/invoice/add', Record<never, never>, Record<never, never>>,
    '/apps/invoice/edit/[id]': RouteRecordInfo<'/apps/invoice/edit/[id]', '/apps/invoice/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/apps/invoice/list/': RouteRecordInfo<'/apps/invoice/list/', '/apps/invoice/list', Record<never, never>, Record<never, never>>,
    '/apps/invoice/preview/[id]': RouteRecordInfo<'/apps/invoice/preview/[id]', '/apps/invoice/preview/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/apps/user/list/': RouteRecordInfo<'/apps/user/list/', '/apps/user/list', Record<never, never>, Record<never, never>>,
    '/apps/user/view/[id]': RouteRecordInfo<'/apps/user/view/[id]', '/apps/user/view/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/charts/apex-chart': RouteRecordInfo<'/charts/apex-chart', '/charts/apex-chart', Record<never, never>, Record<never, never>>,
    '/charts/chartjs': RouteRecordInfo<'/charts/chartjs', '/charts/chartjs', Record<never, never>, Record<never, never>>,
    '/components/alert': RouteRecordInfo<'/components/alert', '/components/alert', Record<never, never>, Record<never, never>>,
    '/components/avatar': RouteRecordInfo<'/components/avatar', '/components/avatar', Record<never, never>, Record<never, never>>,
    '/components/badge': RouteRecordInfo<'/components/badge', '/components/badge', Record<never, never>, Record<never, never>>,
    '/components/button': RouteRecordInfo<'/components/button', '/components/button', Record<never, never>, Record<never, never>>,
    '/components/chip': RouteRecordInfo<'/components/chip', '/components/chip', Record<never, never>, Record<never, never>>,
    '/components/dialog': RouteRecordInfo<'/components/dialog', '/components/dialog', Record<never, never>, Record<never, never>>,
    '/components/expansion-panel': RouteRecordInfo<'/components/expansion-panel', '/components/expansion-panel', Record<never, never>, Record<never, never>>,
    '/components/list': RouteRecordInfo<'/components/list', '/components/list', Record<never, never>, Record<never, never>>,
    '/components/menu': RouteRecordInfo<'/components/menu', '/components/menu', Record<never, never>, Record<never, never>>,
    '/components/pagination': RouteRecordInfo<'/components/pagination', '/components/pagination', Record<never, never>, Record<never, never>>,
    '/components/snackbar': RouteRecordInfo<'/components/snackbar', '/components/snackbar', Record<never, never>, Record<never, never>>,
    '/components/tabs': RouteRecordInfo<'/components/tabs', '/components/tabs', Record<never, never>, Record<never, never>>,
    '/components/timeline': RouteRecordInfo<'/components/timeline', '/components/timeline', Record<never, never>, Record<never, never>>,
    '/components/tooltip': RouteRecordInfo<'/components/tooltip', '/components/tooltip', Record<never, never>, Record<never, never>>,
    '/dashboards/analytics': RouteRecordInfo<'/dashboards/analytics', '/dashboards/analytics', Record<never, never>, Record<never, never>>,
    '/dashboards/crm': RouteRecordInfo<'/dashboards/crm', '/dashboards/crm', Record<never, never>, Record<never, never>>,
    '/dummy/[[id]]': RouteRecordInfo<'/dummy/[[id]]', '/dummy/:id?', { id?: ParamValueZeroOrOne<true> }, { id?: ParamValueZeroOrOne<false> }>,
    '/forgot-password': RouteRecordInfo<'/forgot-password', '/forgot-password', Record<never, never>, Record<never, never>>,
    '/forms/checkbox': RouteRecordInfo<'/forms/checkbox', '/forms/checkbox', Record<never, never>, Record<never, never>>,
    '/forms/combobox': RouteRecordInfo<'/forms/combobox', '/forms/combobox', Record<never, never>, Record<never, never>>,
    '/forms/date-time-picker': RouteRecordInfo<'/forms/date-time-picker', '/forms/date-time-picker', Record<never, never>, Record<never, never>>,
    '/forms/file-input': RouteRecordInfo<'/forms/file-input', '/forms/file-input', Record<never, never>, Record<never, never>>,
    '/forms/form-layouts': RouteRecordInfo<'/forms/form-layouts', '/forms/form-layouts', Record<never, never>, Record<never, never>>,
    '/forms/form-validation': RouteRecordInfo<'/forms/form-validation', '/forms/form-validation', Record<never, never>, Record<never, never>>,
    '/forms/radio': RouteRecordInfo<'/forms/radio', '/forms/radio', Record<never, never>, Record<never, never>>,
    '/forms/range-slider': RouteRecordInfo<'/forms/range-slider', '/forms/range-slider', Record<never, never>, Record<never, never>>,
    '/forms/rating': RouteRecordInfo<'/forms/rating', '/forms/rating', Record<never, never>, Record<never, never>>,
    '/forms/select': RouteRecordInfo<'/forms/select', '/forms/select', Record<never, never>, Record<never, never>>,
    '/forms/slider': RouteRecordInfo<'/forms/slider', '/forms/slider', Record<never, never>, Record<never, never>>,
    '/forms/switch': RouteRecordInfo<'/forms/switch', '/forms/switch', Record<never, never>, Record<never, never>>,
    '/forms/textarea': RouteRecordInfo<'/forms/textarea', '/forms/textarea', Record<never, never>, Record<never, never>>,
    '/forms/textfield': RouteRecordInfo<'/forms/textfield', '/forms/textfield', Record<never, never>, Record<never, never>>,
    '/login': RouteRecordInfo<'/login', '/login', Record<never, never>, Record<never, never>>,
    '/not-authorized': RouteRecordInfo<'/not-authorized', '/not-authorized', Record<never, never>, Record<never, never>>,
    '/other/nav-level-2.1': RouteRecordInfo<'/other/nav-level-2.1', '/other/nav-level-2/1', Record<never, never>, Record<never, never>>,
    '/other/nav-level-3/nav-level-3.1': RouteRecordInfo<'/other/nav-level-3/nav-level-3.1', '/other/nav-level-3/nav-level-3/1', Record<never, never>, Record<never, never>>,
    '/other/nav-level-3/nav-level-3.2': RouteRecordInfo<'/other/nav-level-3/nav-level-3.2', '/other/nav-level-3/nav-level-3/2', Record<never, never>, Record<never, never>>,
    '/pages/account-settings/[tab]': RouteRecordInfo<'/pages/account-settings/[tab]', '/pages/account-settings/:tab', { tab: ParamValue<true> }, { tab: ParamValue<false> }>,
    '/pages/authentication/forgot-password-v1': RouteRecordInfo<'/pages/authentication/forgot-password-v1', '/pages/authentication/forgot-password-v1', Record<never, never>, Record<never, never>>,
    '/pages/authentication/forgot-password-v2': RouteRecordInfo<'/pages/authentication/forgot-password-v2', '/pages/authentication/forgot-password-v2', Record<never, never>, Record<never, never>>,
    '/pages/authentication/login-v1': RouteRecordInfo<'/pages/authentication/login-v1', '/pages/authentication/login-v1', Record<never, never>, Record<never, never>>,
    '/pages/authentication/login-v2': RouteRecordInfo<'/pages/authentication/login-v2', '/pages/authentication/login-v2', Record<never, never>, Record<never, never>>,
    '/pages/authentication/register-v1': RouteRecordInfo<'/pages/authentication/register-v1', '/pages/authentication/register-v1', Record<never, never>, Record<never, never>>,
    '/pages/authentication/register-v2': RouteRecordInfo<'/pages/authentication/register-v2', '/pages/authentication/register-v2', Record<never, never>, Record<never, never>>,
    '/pages/authentication/reset-password-v1': RouteRecordInfo<'/pages/authentication/reset-password-v1', '/pages/authentication/reset-password-v1', Record<never, never>, Record<never, never>>,
    '/pages/authentication/reset-password-v2': RouteRecordInfo<'/pages/authentication/reset-password-v2', '/pages/authentication/reset-password-v2', Record<never, never>, Record<never, never>>,
    '/pages/authentication/two-steps-v1': RouteRecordInfo<'/pages/authentication/two-steps-v1', '/pages/authentication/two-steps-v1', Record<never, never>, Record<never, never>>,
    '/pages/authentication/two-steps-v2': RouteRecordInfo<'/pages/authentication/two-steps-v2', '/pages/authentication/two-steps-v2', Record<never, never>, Record<never, never>>,
    '/pages/authentication/verify-email-v1': RouteRecordInfo<'/pages/authentication/verify-email-v1', '/pages/authentication/verify-email-v1', Record<never, never>, Record<never, never>>,
    '/pages/authentication/verify-email-v2': RouteRecordInfo<'/pages/authentication/verify-email-v2', '/pages/authentication/verify-email-v2', Record<never, never>, Record<never, never>>,
    '/pages/cards/card-actions': RouteRecordInfo<'/pages/cards/card-actions', '/pages/cards/card-actions', Record<never, never>, Record<never, never>>,
    '/pages/cards/card-basic': RouteRecordInfo<'/pages/cards/card-basic', '/pages/cards/card-basic', Record<never, never>, Record<never, never>>,
    '/pages/cards/card-statistics': RouteRecordInfo<'/pages/cards/card-statistics', '/pages/cards/card-statistics', Record<never, never>, Record<never, never>>,
    '/pages/cards/gamification': RouteRecordInfo<'/pages/cards/gamification', '/pages/cards/gamification', Record<never, never>, Record<never, never>>,
    '/pages/faq': RouteRecordInfo<'/pages/faq', '/pages/faq', Record<never, never>, Record<never, never>>,
    '/pages/help-center/': RouteRecordInfo<'/pages/help-center/', '/pages/help-center', Record<never, never>, Record<never, never>>,
    '/pages/help-center/[category]/[subcategory]/': RouteRecordInfo<'/pages/help-center/[category]/[subcategory]/', '/pages/help-center/:category/:subcategory', { category: ParamValue<true>, subcategory: ParamValue<true> }, { category: ParamValue<false>, subcategory: ParamValue<false> }>,
    '/pages/help-center/[category]/[subcategory]/[article]': RouteRecordInfo<'/pages/help-center/[category]/[subcategory]/[article]', '/pages/help-center/:category/:subcategory/:article', { category: ParamValue<true>, subcategory: ParamValue<true>, article: ParamValue<true> }, { category: ParamValue<false>, subcategory: ParamValue<false>, article: ParamValue<false> }>,
    '/pages/icons': RouteRecordInfo<'/pages/icons', '/pages/icons', Record<never, never>, Record<never, never>>,
    '/pages/misc/coming-soon': RouteRecordInfo<'/pages/misc/coming-soon', '/pages/misc/coming-soon', Record<never, never>, Record<never, never>>,
    '/pages/misc/internal-server-error': RouteRecordInfo<'/pages/misc/internal-server-error', '/pages/misc/internal-server-error', Record<never, never>, Record<never, never>>,
    '/pages/misc/not-authorized': RouteRecordInfo<'/pages/misc/not-authorized', '/pages/misc/not-authorized', Record<never, never>, Record<never, never>>,
    '/pages/misc/not-found': RouteRecordInfo<'/pages/misc/not-found', '/pages/misc/not-found', Record<never, never>, Record<never, never>>,
    '/pages/misc/under-maintenance': RouteRecordInfo<'/pages/misc/under-maintenance', '/pages/misc/under-maintenance', Record<never, never>, Record<never, never>>,
    '/pages/pricing': RouteRecordInfo<'/pages/pricing', '/pages/pricing', Record<never, never>, Record<never, never>>,
    '/pages/typography': RouteRecordInfo<'/pages/typography', '/pages/typography', Record<never, never>, Record<never, never>>,
    '/register': RouteRecordInfo<'/register', '/register', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
