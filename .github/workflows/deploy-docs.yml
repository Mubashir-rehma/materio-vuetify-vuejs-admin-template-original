name: Deploy - Documentation
run-name: ${{ inputs.is_production && 'üöÄ' || 'üß™' }} Deploy - Documentation

on:
  workflow_dispatch:
    inputs:
      is_production:
        type: boolean
        description: Is production deployment

jobs:
  deployment:
    runs-on: ubuntu-latest
    env:
      STAG_DIR: ${{ secrets.PROD_DIR }}staging/
      DEPLOY_DIR: ${{ secrets.PROD_DIR }}${{ !inputs.is_production && 'staging/' || '' }}
    steps:
      - name: ‚öôÔ∏è Set TEMPLATE_NAME environment variable from repo name
        run: echo TEMPLATE_NAME=${{ github.event.repository.name }} | cut -d '-' -f1 >> $GITHUB_ENV
    
      - name: ‚öôÔ∏è Set DOCS_BASE environment variables from PROD_DIR secret
        run: echo -e DOCS_BASE=/$(basename ${{ secrets.PROD_DIR }})/documentation/ >> $GITHUB_ENV
      
      - name: ‚öôÔ∏è Set BASE environment variable for building docs
        run: (${{inputs.is_production}} && echo -e "BASE=${{ env.DOCS_BASE }}" || echo -e "BASE=${{ env.DOCS_BASE }}" | sed 's|/|/staging/|2') >> $GITHUB_ENV
      
      - name: ‚¨áÔ∏è Checkout template
        uses: actions/checkout@v3
        with:
          path: ${{ env.TEMPLATE_NAME }}/vue

      - name: üòí Use Node 16.17.1 version
        uses: actions/setup-node@v3
        with:
          node-version: 16.17.1

      - name: ‚¨áÔ∏è Checkout scripts
        uses: actions/checkout@v3
        with:
          repository: themeselection/automation-scripts
          token: ${{ secrets.GH_PAT }}
          path: automation-scripts

      - name: ‚¨áÔ∏è Install packages in automation-scripts dir
        working-directory: automation-scripts/vue
        run: yarn

      - name: üõ†Ô∏è Inject GTM code in SSR template
        working-directory: automation-scripts/vue
        run: yarn tsx src/templates/${{ env.TEMPLATE_NAME }}/scripts/injectGtmInDocs.ts
      
      - name: üì¶ Build documentation
        run: |
          cd ${{ env.TEMPLATE_NAME }}/vue/docs
          yarn
          yarn build
          mv .vuepress/dist $GITHUB_WORKSPACE/documentation
        
      - name: üóÑÔ∏è Cleanup & Backup
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSHKEY }}
          script: |
            mkdir -p ${{ env.DEPLOY_DIR }}
            cd ${{ env.DEPLOY_DIR }}
            rm -rf documentation-backup-*.zip
            DOC_ZIP_NAME="documentation-backup-$(date +"%Y-%m-%d-%H-%M-%S").zip"
            [[ "${{ inputs.is_production }}" == "true" ]] && rm -rf ${{ env.STAG_DIR }}/documentation && zip -r $DOC_ZIP_NAME documentation
            rm -rf documentation
          
      - name: üöÄ Upload documentation
        uses: appleboy/scp-action@master
        with:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          PORT: ${{ secrets.PORT }}
          KEY: ${{ secrets.SSHKEY }}
          source: documentation
          target: ${{ env.DEPLOY_DIR }}
